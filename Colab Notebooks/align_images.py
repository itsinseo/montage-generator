{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"align_images.py","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMf1N2ornUL3Z3ZfqoRx1Xu"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":388},"id":"rKAGG_jnamAM","executionInfo":{"status":"error","timestamp":1635064425417,"user_tz":-540,"elapsed":300,"user":{"displayName":"김인서","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03765459920034352817"}},"outputId":"b6b1b0fa-3793-4bae-f139-6af7e9bf7d22"},"source":["import os\n","import sys\n","import bz2\n","from tensorflow.keras.utils import get_file\n","from ffhq_dataset.face_alignment import image_align\n","from ffhq_dataset.landmarks_detector import LandmarksDetector\n","\n","LANDMARKS_MODEL_URL = 'http://dlib.net/files/shape_predictor_68_face_landmarks.dat.bz2'\n","\n","\n","def unpack_bz2(src_path):\n","    data = bz2.BZ2File(src_path).read()\n","    dst_path = src_path[:-4]\n","    with open(dst_path, 'wb') as fp:\n","        fp.write(data)\n","    return dst_path\n","\n","\n","if __name__ == \"__main__\":\n","    \"\"\"\n","    Extracts and aligns all faces from images using DLib and a function from original FFHQ dataset preparation step\n","    python align_images.py /raw_images /aligned_images\n","    \"\"\"\n","\n","    landmarks_model_path = unpack_bz2(get_file('shape_predictor_68_face_landmarks.dat.bz2',\n","                                               LANDMARKS_MODEL_URL, cache_subdir='temp'))\n","    RAW_IMAGES_DIR = sys.argv[1]\n","    ALIGNED_IMAGES_DIR = sys.argv[2]\n","\n","    landmarks_detector = LandmarksDetector(landmarks_model_path)\n","    for img_name in [f for f in os.listdir(RAW_IMAGES_DIR) if f[0] not in '._']:\n","        raw_img_path = os.path.join(RAW_IMAGES_DIR, img_name)\n","        for i, face_landmarks in enumerate(landmarks_detector.get_landmarks(raw_img_path), start=1):\n","            face_img_name = '%s_%02d.png' % (os.path.splitext(img_name)[0], i)\n","            aligned_face_path = os.path.join(ALIGNED_IMAGES_DIR, face_img_name)\n","            os.makedirs(ALIGNED_IMAGES_DIR, exist_ok=True)\n","            image_align(raw_img_path, aligned_face_path, face_landmarks)"],"execution_count":9,"outputs":[{"output_type":"error","ename":"ModuleNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-9-e006c4aa0ecb>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mbz2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mutils\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mget_file\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mffhq_dataset\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mface_alignment\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mimage_align\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mffhq_dataset\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlandmarks_detector\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mLandmarksDetector\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'ffhq_dataset'","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"],"errorDetails":{"actions":[{"action":"open_url","actionText":"Open Examples","url":"/notebooks/snippets/importing_libraries.ipynb"}]}}]},{"cell_type":"code","metadata":{"id":"J3p0cyvNaqJa"},"source":[""],"execution_count":null,"outputs":[]}]}